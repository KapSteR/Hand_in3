package iha.smap.jno10695.hand_in5;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DatabaseHandler extends SQLiteOpenHelper {

	// All Static variables
	// Database Version
	public static final int DATABASE_VERSION = 1;

	// Database Name
	public static final String DATABASE_NAME = "costumersManager";

	// costumers table name
	public static final String DATABASE_TABLE = "costumers";

	// costumers Table Columns names
	public static final String KEY_ID = "id";
	public static final String KEY_NAME = "name";
	public static final String KEY_ADDRESS = "address";

	public DatabaseHandler(Context context) {
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
	}

	// Creating Tables
	@Override
	public void onCreate(SQLiteDatabase db) {
		String CREATE_COSTUMERS_TABLE = "CREATE TABLE " + DATABASE_TABLE + "("
				+ KEY_ID + " INTEGER PRIMARY KEY," + KEY_NAME + " TEXT,"
				+ KEY_ADDRESS + " TEXT" + ")";
		db.execSQL(CREATE_COSTUMERS_TABLE);
	}

	// Upgrading database
	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// Drop older table if existed
		db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE);

		// Create tables again
		onCreate(db);
	}

	// Adding new costumer
	public void addCostumer(Costumer costumer) {
		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();
		values.put(KEY_NAME, costumer.getName()); // Costumer name
		values.put(KEY_ADDRESS, costumer.getAddress()); // Costumer address
														// Number

		// Inserting Row
		db.insert(DATABASE_TABLE, null, values);
		db.close(); // Closing database connection
	}

	// Getting single costumer
	public Costumer getCostumer(int id) {
		SQLiteDatabase db = this.getReadableDatabase();

		Cursor cursor = db.query(DATABASE_TABLE, new String[] { KEY_ID,
				KEY_NAME, KEY_ADDRESS }, KEY_ID + "=?",
				new String[] { String.valueOf(id) }, null, null, null, null);
		if (cursor != null)
			cursor.moveToFirst();

		Costumer costumer = new Costumer(Integer.parseInt(cursor.getString(0)),
				cursor.getString(1), cursor.getString(2));
		// return costumer
		return costumer;
	}

	// Getting All Costumers
	public List<Costumer> getAllCostumers() {
		List<Costumer> costumerList = new ArrayList<Costumer>();
		// Select All Query
		String selectQuery = "SELECT  * FROM " + DATABASE_TABLE;

		SQLiteDatabase db = this.getWritableDatabase();
		Cursor cursor = db.rawQuery(selectQuery, null);

		// looping through all rows and adding to list
		if (cursor.moveToFirst()) {
			do {
				Costumer costumer = new Costumer();
				costumer.setID(Integer.parseInt(cursor.getString(0)));
				costumer.setName(cursor.getString(1));
				costumer.setAddress(cursor.getString(2));
				// Adding Costumer to list
				costumerList.add(costumer);
			} while (cursor.moveToNext());
		}

		// return costumer list
		return costumerList;
	}

	// Deleting single costumer
	public void deletecostumer(Costumer costumer) {
		SQLiteDatabase db = this.getWritableDatabase();
		db.delete(DATABASE_TABLE, KEY_ID + " = ?",
				new String[] { String.valueOf(costumer.getID()) });
		db.close();
	}
}
