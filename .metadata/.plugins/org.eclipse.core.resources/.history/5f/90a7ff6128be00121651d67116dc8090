package iha.smap.jno10695.hand_in5;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DatabaseHandler extends SQLiteOpenHelper {

	// All Static variables
	// Database Version
	private static final int DATABASE_VERSION = 1;

	// Database Name
	private static final String DATABASE_NAME = "costumersManager";

	// Contacts table name
	private static final String TABLE_COSTUMERS = "costumers";

	// Contacts Table Columns names
	private static final String KEY_ID = "id";
	private static final String KEY_NAME = "name";
	private static final String KEY_ADDRESS = "address";

	public DatabaseHandler(Context context) {
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
	}

	// Creating Tables
	@Override
	public void onCreate(SQLiteDatabase db) {
		String CREATE_CONTACTS_TABLE = "CREATE TABLE " + TABLE_COSTUMERS + "("
				+ KEY_ID + " INTEGER PRIMARY KEY," + KEY_NAME + " TEXT,"
				+ KEY_ADDRESS + " TEXT" + ")";
		db.execSQL(CREATE_CONTACTS_TABLE);
	}

	// Upgrading database
	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// Drop older table if existed
		db.execSQL("DROP TABLE IF EXISTS " + TABLE_COSTUMERS);

		// Create tables again
		onCreate(db);
	}

	// Adding new contact
	public void addContact(Costumer costumer) {
		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();
		values.put(KEY_NAME, costumer.getName()); // Costumer name
		values.put(KEY_ADDRESS, costumer.getAddress()); // Costumer address
														// Number

		// Inserting Row
		db.insert(TABLE_COSTUMERS, null, values);
		db.close(); // Closing database connection
	}

	// Getting single contact
	public Costumer getCostumer(int id) {
		SQLiteDatabase db = this.getReadableDatabase();

		Cursor cursor = db.query(TABLE_COSTUMERS, new String[] { KEY_ID,
				KEY_NAME, KEY_ADDRESS }, KEY_ID + "=?",
				new String[] { String.valueOf(id) }, null, null, null, null);
		if (cursor != null)
			cursor.moveToFirst();

		Costumer costumer = new Costumer(Integer.parseInt(cursor.getString(0)),
				cursor.getString(1), cursor.getString(2));
		// return contact
		return costumer;
	}

	// Deleting single contact
	public void deleteContact(Costumer costumer) {
		SQLiteDatabase db = this.getWritableDatabase();
		db.delete(TABLE_COSTUMERS, KEY_ID + " = ?",
				new String[] { String.valueOf(costumer.getID()) });
		db.close();
	}
}
